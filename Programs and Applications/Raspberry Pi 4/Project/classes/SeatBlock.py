import busio
import digitalio
import board
import adafruit_mcp3xxx.mcp3008 as MCP
from adafruit_mcp3xxx.analog_in import AnalogIn

from funcs.hx711 import HX711

class SeatBlock:
    def __init__(self, type_str: str):
        self.__type = None
        self.__objects = None
        self.__ready = False
        self.__init_object(type_str)

    def __init_object(self, type_str: str):
        # Analog HX711 Sensor
        if type_str == "HX711":
            self.__type = 0
            self.__init_hx()

        # Optic Fiber Sensor
        elif type_str == "OPTICS":
            self.__type = 1
            self.__init_mcp()
        else:
            raise Exception("Type must be either 'HX711' or 'OPTIC'")

    def __init_hx(self):
        [back_left_dt, back_left_sck] = [8, 7]
        [back_right_dt, back_right_sck] = [6, 13]
        [front_left_dt, front_left_sck] = [23, 24]
        [front_right_dt, front_right_sck] = [27, 22]

        bl_a = 0
        bl_b = 1

        br_a = 0
        br_b = 1

        fl_a = 0
        fl_b = 1

        fr_a = 0
        fr_b = 1

        hx_bl = HX711(back_left_dt, back_left_sck)
        hx_bl.set_reading_format("MSB", "MSB")
        hx_bl.set_reference_unit(bl_b)
        hx_bl.set_offset(bl_a)

        hx_br = HX711(back_right_dt, back_right_sck)
        hx_br.set_reading_format("MSB", "MSB")
        hx_br.set_reference_unit(br_b)
        hx_br.set_offset(br_a)

        hx_fl = HX711(front_left_dt, front_left_sck)
        hx_fl.set_reading_format("MSB", "MSB")
        hx_fl.set_reference_unit(fl_b)
        hx_fl.set_offset(fl_a)

        hx_fr = HX711(front_right_dt, front_right_sck)
        hx_fr.set_reading_format("MSB", "MSB")
        hx_fr.set_reference_unit(fr_b)
        hx_fr.set_offset(fr_a)

        self.__objects = [hx_bl, hx_br, hx_fl, hx_fr]
        self.__ready = True

    def __init_mcp(self):
        spi = busio.SPI(clock=board.SCK_1, MISO=board.MISO_1, MOSI=board.MOSI_1)
        cs = digitalio.DigitalInOut(board.D16)
        self.__objects = MCP.MCP3008(spi, cs)

    def get_data(self):
        if self.__type == 0 and self.__objects:
            values = []
            for obj in self.__objects():
                values.append(obj.get_weight(5))
                obj.power_down()
                obj.power_up()
            return values
        elif self.__type == 1 and self.__objects:
            pin0 = AnalogIn(self.__objects, MCP.P0)
            pin1 = AnalogIn(self.__objects, MCP.P1)
            pin2 = AnalogIn(self.__objects, MCP.P2)
            pin3 = AnalogIn(self.__objects, MCP.P3)

            x = pin0.value
            back_left = ((((140737488355328*x)/3736422817946741 + 12105159341707533906590968204162706881777920556662784/52163658952877834786409649225062860208497747021)**2 + 4799353480814914909311737530075434751061980049519479849398185423082538148492723917665174681470250254336/73468277514508100952610440199489260667444026255105650176204336789276464537273347086488688109907)**(1/2) - (140737488355328*x)/3736422817946741 - 12105159341707533906590968204162706881777920556662784/52163658952877834786409649225062860208497747021)**(1/3) - 16867895917307908420169277244215296/(41882566423419194514825337563243*((((140737488355328*x)/3736422817946741 + 12105159341707533906590968204162706881777920556662784/52163658952877834786409649225062860208497747021)**2 + 4799353480814914909311737530075434751061980049519479849398185423082538148492723917665174681470250254336/73468277514508100952610440199489260667444026255105650176204336789276464537273347086488688109907)**(1/2) - (140737488355328*x)/3736422817946741 - 12105159341707533906590968204162706881777920556662784/52163658952877834786409649225062860208497747021)**(1/3)) + 104359353227313536/3736422817946741
            x = pin1.value
            back_right = ((((70368744177664*x)/3061347397455551 + 215716992365933590359328991614259260592167183319040/28690482140996076641346567243632373541698649151)**2 + 551179906758263415876978136302141591848731040237021733557773433729588209207161369118510422163456000000/22224881668036000080012531699138935623221149447346554265008541520859156792649042726491211561627)**(1/2) - (70368744177664*x)/3061347397455551 - 215716992365933590359328991614259260592167183319040/28690482140996076641346567243632373541698649151)**(1/3) - 8199067446785391449630591657113600/(28115543663723626035927062140803*((((70368744177664*x)/3061347397455551 + 215716992365933590359328991614259260592167183319040/28690482140996076641346567243632373541698649151)**2 + 551179906758263415876978136302141591848731040237021733557773433729588209207161369118510422163456000000/22224881668036000080012531699138935623221149447346554265008541520859156792649042726491211561627)**(1/2) - (70368744177664*x)/3061347397455551 - 215716992365933590359328991614259260592167183319040/28690482140996076641346567243632373541698649151)**(1/3)) + 56019421140000768/3061347397455551
            x = pin2.value
            front_left = 1046624461281799604636501386824466432/(511100576393375851943726607214329*((562949953421312*x)/7535844540102809 + (((562949953421312*x)/7535844540102809 - 2533815658518667461679383259376227993016763841148354560/11554723464172260135589221354573925179524273850483)**2 - 1146496259151940788124234510939447907555681902146558422286523859167484662129411550442649024258326845684973568/133511634333492995757238868456683610914373835077970528223823704330198743596205813093214271039333289)**(1/2) - 2533815658518667461679383259376227993016763841148354560/11554723464172260135589221354573925179524273850483)**(1/3)) + ((562949953421312*x)/7535844540102809 + (((562949953421312*x)/7535844540102809 - 2533815658518667461679383259376227993016763841148354560/11554723464172260135589221354573925179524273850483)**2 - 1146496259151940788124234510939447907555681902146558422286523859167484662129411550442649024258326845684973568/133511634333492995757238868456683610914373835077970528223823704330198743596205813093214271039333289)**(1/2) - 2533815658518667461679383259376227993016763841148354560/11554723464172260135589221354573925179524273850483)**(1/3) + 134373992172179072/22607533620308427
            x = pin3.value
            front_right = ((((70368744177664*x)/1715744897054745 - 7891336685305187360951421758442415265821409212792832/136370964413178325211249959234885997204288677875)**2 + 7773288769545982938804502170519054097702878477727064323569543119102981177208060236978045063694726987776/18597039934980349196643649596017645408303804930584796095045746083169022848696296657915514515625)**(1/2) - (70368744177664*x)/1715744897054745 + 7891336685305187360951421758442415265821409212792832/136370964413178325211249959234885997204288677875)**(1/3) - 19809260683087491379909863488562176/(26494024965924577659979743135225*((((70368744177664*x)/1715744897054745 - 7891336685305187360951421758442415265821409212792832/136370964413178325211249959234885997204288677875)**2 + 7773288769545982938804502170519054097702878477727064323569543119102981177208060236978045063694726987776/18597039934980349196643649596017645408303804930584796095045746083169022848696296657915514515625)**(1/2) - (70368744177664*x)/1715744897054745 + 7891336685305187360951421758442415265821409212792832/136370964413178325211249959234885997204288677875)**(1/3)) + 149692273138145408/5147234691164235

            return [back_left, back_right, front_left, front_right]
        else:
            raise Exception("You need to define the type and initialize the object")
        pass

    def is_ready(self):
        return self.__ready
